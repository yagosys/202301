apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8segressnetworkpolicytocfosutmpolicy
spec:
  crd:
    spec:
      names:
        kind: K8sEgressNetworkPolicyToCfosUtmPolicy
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          properties:
            message:
              type: string
            podcidr:
              type: string
            cfosegressfirewallpolicy:
              type: string 
            outgoingport:
              type: string
            utmstatus:
              type: string
            ipsprofile:
              type: string
            avprofile:
              type: string
            sslsshprofile:
              type: string 
            action:
              type: string
            srcintf:
              type: string
            firewalladdressapiurl:
              type: string
            firewallpolicyapiurl:
              type: string
            labelvalue:
              type: string
            lablekey:
              type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8segressnetworkpolicytocfosutmpolicy
        import future.keywords.every
          pod_egress_has_http_port {
             input.review.object.spec.egress[_].ports[_].port == 80
          }
          pod_egress_has_https_port {
            input.review.object.spec.egress[_].ports[_].port == 443
          }
          
          pod_egress_has_dns_port {
            input.review.object.spec.egress[_].ports[_].port == 53
            input.review.object.spec.egress[_].ports[_].protocol == "UDP"
          }

          service_dns = "DNS" {
            pod_egress_has_dns_port
          }

          service_http = "HTTP" {
            pod_egress_has_http_port
          }

          service_https = "HTTPS" {
            pod_egress_has_https_port
          }
          violation[{
            "msg" : msg 
          }] {
          input.review.object.metadata.labels.app==input.parameters.label
          namespace := input.review.object.metadata.namespace
          label := input.review.object.spec.podSelector.matchLabels.app
          dstipblock :=  input.review.object.spec.egress[_].to[_].ipBlock.cidr
          #src_addr_group := input.parameters.addrgrouplabel
          t := concat("",[namespace,"app"])
          src_addr_group := concat("",[t,label])
          ipsprofile := input.parameters.ipsprofile
          avprofile := input.parameters.avprofile
          sslsshprofile := input.parameters.sslsshprofile
          action  := input.parameters.action
          srcintf := input.parameters.srcintf
          token := "4252d60858fb48"
          podcidr := input.parameters.podcidr
          outgoingport := input.parameters.outgoingport
          firewalladdressapiurl := input.parameters.firewalladdressapiurl
          firewallpolicyapiurl := input.parameters.firewallpolicyapiurl
          firewalladdrgrpapiurl := input.parameters.firewalladdressgrpapiurl
          myip := http.send({
           "method": "GET",
           "url": "https://ipinfo.io/",
           "headers": {
           "Authorization": sprintf("Bearer %s", [token])
           }
          }).body.ip

          headers := {
           "Content-Type": "application/json",
          }
          
          addrgrpbody := {
            "data":  {"name": src_addr_group, "member": [{"name": "none"}]}
          }


          dstaddrresp := http.send({
            "method": "POST",
            "url":  firewalladdrgrpapiurl,
            "headers": headers,
            "body": addrgrpbody
          })
 

          msg :=sprintf("\n{%v,%v} ", [
          addrgrpbody,
          dstaddrresp.status_code
         ])
        } 

        
