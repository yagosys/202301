apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8segressnetworkpolicytocfosutmpolicy
spec:
  crd:
    spec:
      names:
        kind: K8sEgressNetworkPolicyToCfosUtmPolicy
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          properties:
            message:
              type: string
            podcidr:
              type: string
            cfosegressfirewallpolicy:
              type: string 
            outgoingport:
              type: string
            utmstatus:
              type: string
            ipsprofile:
              type: string
            avprofile:
              type: string
            sslsshprofile:
              type: string 
            action:
              type: string
            srcintf:
              type: string
            firewalladdressapiurl:
              type: string
            firewallpolicyapiurl:
              type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8segressnetworkpolicytocfosutmpolicy
        import future.keywords.every
          pod_egress_has_http_port {
             input.review.object.spec.egress[_].ports[_].port == 80
          }
          pod_egress_has_https_port {
            input.review.object.spec.egress[_].ports[_].port == 443
          }
          
          pod_egress_has_dns_port {
            input.review.object.spec.egress[_].ports[_].port == 53
            input.review.object.spec.egress[_].ports[_].protocol == "UDP"
          }

          service_dns = "DNS" {
            pod_egress_has_dns_port
          }

          service_http = "HTTP" {
            pod_egress_has_http_port
          }

          service_https = "HTTPS" {
            pod_egress_has_https_port
          }
          violation[{
            "msg" : msg 
          }] {
          input.review.object.metadata.labels.app==input.parameters.label
          protocol := input.review.object.spec.egress[_].ports[_].protocol
          dstipblock :=  input.review.object.spec.egress[_].to[_].ipBlock.cidr
          utm := input.parameters.utmstatus
          utm == "enable"
          ipsprofile := input.parameters.ipsprofile
          avprofile := input.parameters.avprofile
          sslsshprofile := input.parameters.sslsshprofile
          action  := input.parameters.action
          srcintf := input.parameters.srcintf
          token := "4252d60858fb48"
          podcidr := input.parameters.podcidr
          outgoingport := input.parameters.outgoingport
          firewalladdressapiurl := input.parameters.firewalladdressapiurl
          firewallpolicyapiurl := input.parameters.firewallpolicyapiurl
          myip := http.send({
           "method": "GET",
           "url": "https://ipinfo.io/",
           "headers": {
           "Authorization": sprintf("Bearer %s", [token])
           }
          }).body.ip

          headers := {
           "Content-Type": "application/json",
          }
          
          srcaddrbody := {
            "data": {"name": "srcipblock", "subnet": podcidr}
          }
          dstaddrbody := {
            "data":  {"name": "dstipblock", "subnet": dstipblock}
          }

          srcaddrresp := http.send({
            "method": "POST",
            "url": firewalladdressapiurl,
            "headers": headers,
            "body": srcaddrbody
          })

          dstaddrresp := http.send({
            "method": "POST",
            "url": firewalladdressapiurl,
            "headers": headers,
            "body": dstaddrbody
          })
 
          body := {
            "data": { "policyid":"20",
                      "name": "pod-egress-traffic", 
                      "utm-status": "enable",
                      "srcintf": [{"name": srcintf}], 
                      "dstintf": [{"name": outgoingport}], 
                      "srcaddr": [{"name": "srcipblock"}], 
                      "dstaddr": [{"name": "dstipblock" }],
                      "service": [{"name": service_https},{"name":service_http}, {"name":service_dns}],
                      "av-profile": avprofile,
                      "ips-sensor": ipsprofile,
                      "action": "accept",
                      "logtraffic": "all",
                      "nat": "enable",
                      "ssl-ssh-profile": sslsshprofile

             }
          }
          resp := http.send({
            "method": "POST",
            "url":firewallpolicyapiurl, 
            "headers": headers,
            "body": body
          })


          msg :=sprintf("\n{\n set srcintf =%v\nset av-profile=%v\nset ips-sensor=%v\nset ssl-ssh-profile %v\nset dstintf %v\nset dstaddr %v\nset service =%v%v%v\nset srcaddr %v\nset action %v\n srcadd:%v\n dstaddr:%v\n firewallpolicy:%v \n} ", [
          srcintf,
          avprofile,
          ipsprofile,
          sslsshprofile,
          outgoingport,
          dstipblock,
          service_https,
          service_http,
          service_dns,
          podcidr,
          action,
          srcaddrresp.status_code,
          dstaddrresp.status_code,
          resp.status_code,
         ])
        } 

        
