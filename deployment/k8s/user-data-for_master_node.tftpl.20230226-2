#!/bin/bash -xe

function aptgetupdate {
    while true; do
         sudo apt-get update -y
    if [ $? -eq 0 ]; then
      break
    fi
    sleep 5
  done
}

export DEBIAN_FRONTEND=noninteractive
exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

aptgetupdate
sudo apt-get install linux-modules-extra-`uname -r` -y 
sudo modprobe vrf

#disable swap
sudo swapoff -a
sudo sed -e '/swap/ s/^#*/#/' -i /etc/fstab

#install dep module for cri-o runtime
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter



# sysctl params required by setup, params persist across reboots
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
net.ipv4.conf.all.accept_redirects  = 0
net.ipv4.conf.default.accept_redirects = 0
EOF

sudo sysctl --system

##instal cri-o
export OS=xUbuntu_22.04
export CRIO_VERSION=1.25
echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/ /"| sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
echo "deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/$CRIO_VERSION/$OS/ /"|sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable:cri-o:$CRIO_VERSION.list
curl -L https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:$CRIO_VERSION/$OS/Release.key | sudo apt-key add -
curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/Release.key | sudo apt-key add -

aptgetupdate


sudo apt-get install cri-o cri-o-runc cri-tools -y
sudo systemctl start crio
sudo systemctl enable crio

aptgetupdate


    while true; do
	 sudo apt-get -y install containernetworking-plugins
    if [ $? -eq 0 ]; then
      break
    fi
    sleep 5
  done

sudo apt-get -y install containernetworking-plugins
#sudo wget -c http://archive.ubuntu.com/ubuntu/pool/universe/g/golang-github-containernetworking-plugins/containernetworking-plugins_0.9.1+ds1-1_amd64.deb
#sudo dpkg -i containernetworking-plugins_0.9.1+ds1-1_amd64.deb

sudo sed -i  's/# network_dir/network_dir/g' /etc/crio/crio.conf
sudo  sed -i '/# plugin_dirs/{a\
plugin_dirs = [\n"/opt/cni/bin/",\n"/usr/lib/cni/",\n]\n
}' /etc/crio/crio.conf
sudo systemctl restart crio

sudo apt-get install -y apt-transport-https ca-certificates curl

sudo curl -fsSLo /etc/apt/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

aptgetupdate


sudo apt-get install -y


sudo apt-get install kubelet  -y
sudo apt-get install kubectl -y
sudo apt-get install kubeadm -y

sudo apt-mark hold kubelet kubeadm kubectl

sudo kubeadm config images pull --cri-socket unix:///var/run/crio/crio.sock --v=5

#https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/ kubelet params 
local_ip=$(ip route get 8.8.8.8 | awk -F"src " 'NR==1{split($2,a," ");print a[1]}')
CLUSTERDNSIP="${CLUSTERDNSIP}"
cat <<EOF | sudo tee /etc/default/kubelet
KUBELET_EXTRA_ARGS=--node-ip=$local_ip,--cluster-dns=$CLUSTERDNSIP
EOF

IPADDR=$local_ip
NODENAME=`hostname | tr -d '-'`
#POD_CIDR="10.244.0.0/16"
POD_CIDR="${POD_CIDR}"
SERVICE_CIDR="${SERVICE_CIDR}"

sudo kubeadm init --cri-socket=unix:///var/run/crio/crio.sock --apiserver-advertise-address=$IPADDR  --apiserver-cert-extra-sans=$IPADDR  --service-cidr=$SERVICE_CIDR --pod-network-cidr=$POD_CIDR --node-name $NODENAME  --token-ttl=0 -v=5

sleep 10
mkdir -p /home/ubuntu/.kube
sudo cp -i /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
sudo chown ubuntu:ubuntu /home/ubuntu/.kube/config
sudo mkdir -p /root/.kube
sudo cp /home/ubuntu/.kube/config /root/.kube/config

kubectl --kubeconfig /home/ubuntu/.kube/config config set-cluster kubernetes --server "https://$local_ip:6443"


#install whereabout ipam plugin
cd /home/ubuntu
git clone https://github.com/k8snetworkplumbingwg/whereabouts && cd whereabouts
kubectl --kubeconfig /home/ubuntu/.kube/config apply \
    -f doc/crds/daemonset-install.yaml \
    -f doc/crds/whereabouts.cni.cncf.io_ippools.yaml \
    -f doc/crds/whereabouts.cni.cncf.io_overlappingrangeipreservations.yaml

#allow use controlplane node to create user workload

WORKER_COUNT="${WORKER_COUNT}"
if [ $WORKER_COUNT  -eq 0 ]
then 
  kubectl --kubeconfig /home/ubuntu/.kube/config taint nodes --all node-role.kubernetes.io/control-plane- 
else
 kubectl --kubeconfig /home/ubuntu/.kube/config apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml

 cni_file="/etc/cni/net.d/100-crio-bridge.conf"
 if [ -f "$cni_file" ]; then
    sudo rm $cni_file
    echo "remove $cni_file"
 else
    echo "$cni_file not exist, do nothing"
 fi
# sudo sed -i 's/10\.85/10.244/g' /etc/cni/net.d/100-crio-bridge.conf
# sudo mv /etc/cni/net.d/100-crio-bridge.conf /etc/cni/net.d/5-crio-bridge.conf
fi 

#install multus CNI

sudo crictl pull ghcr.io/k8snetworkplumbingwg/multus-cni:stable
cd /home/ubuntu
git clone https://github.com/intel/multus-cni.git
sudo chown ubuntu:ubuntu /home/ubuntu/multus-cni

if [ $WORKER_COUNT  -eq 0 ]
then 
	echo 'use multus default where multus configuration will be auto generatd'
else
	echo 'multus configuration will be set to use 70-multus.config'
        sudo sed -i 's/multus-conf-file=auto/multus-conf-file=\/tmp\/multus-conf\/70-multus.conf/g' /home/ubuntu/multus-cni/deployments/multus-daemonset.yml
fi 

cat /home/ubuntu/multus-cni/deployments/multus-daemonset.yml | kubectl --kubeconfig /home/ubuntu/.kube/config apply -f -


if [ $WORKER_COUNT  -eq 0 ]
then
	echo ''
else
       if ip link show cni0 >/dev/null 2>&1; then
         echo "Deleting interface cni0"
         sudo ip link delete cni0
       else
         echo "Interface cni0 not found"
       fi
fi
       #install docker pull secret
cat /home/ubuntu/.dockerinterbeing.yaml | kubectl --kubeconfig /home/ubuntu/.kube/config apply -f -


kubectl --kubeconfig /home/ubuntu/.kube/config get pod -A 
cd /home/ubuntu
mkdir /home/ubuntu/data -p
git clone https://github.com/yagosys/202301.git 

cat /home/ubuntu/fos_license.yaml | kubectl --kubeconfig /home/ubuntu/.kube/config apply -f -

grep discovery-token-ca-cert /var/log/user-data.log -B 1 | head -n 2 | tr -d '\n' | tr -d '\\' > /home/ubuntu/workloadtojoin.sh
chmod +x /home/ubuntu/workloadtojoin.sh

sudo apt-get install jq -y 

multus_cni_file="/etc/cni/net.d/70-multus.conf"

if [ -f "$multus_cni_file" ]; then
    sudo mv "$multus_cni_file" "/etc/cni/net.d/00-multus.conf"
    echo "File renamed to 00-multus.conf to make multus as first cni"
else
    echo "File 70-multus.conf not found"
fi

function function_restart_coredns_deployment_after_install_multus () {
if [ $WORKER_COUNT  -eq 0 ]
then
kubectl --kubeconfig /home/ubuntu/.kube/config get pod -A -o wide
else
#sleep 10
kubectl --kubeconfig /home/ubuntu/.kube/config rollout restart deployment/coredns -n kube-system
kubectl --kubeconfig /home/ubuntu/.kube/config get pod -A -o wide

fi

}

function_restart_coredns_deployment_after_install_multus
touch /home/ubuntu/deploymentcompleted



