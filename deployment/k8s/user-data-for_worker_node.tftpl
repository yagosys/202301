#!/bin/bash -xe

function aptgetupdate {
    while true; do
         sudo apt-get update -y
    if [ $? -eq 0 ]; then
      break
    fi
    sleep 5
  done
}

export DEBIAN_FRONTEND=noninteractive
exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

aptgetupdate
sudo apt-get install linux-modules-extra-`uname -r` -y 
sudo modprobe vrf

#disable swap
sudo swapoff -a
sudo sed -e '/swap/ s/^#*/#/' -i /etc/fstab

#install dep module for cri-o runtime
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter



# sysctl params required by setup, params persist across reboots
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

sudo sysctl --system

##instal cri-o
export OS=xUbuntu_22.04
export CRIO_VERSION=1.25
echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/ /"| sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
echo "deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/$CRIO_VERSION/$OS/ /"|sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable:cri-o:$CRIO_VERSION.list
curl -L https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:$CRIO_VERSION/$OS/Release.key | sudo apt-key add -
curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/Release.key | sudo apt-key add -

aptgetupdate


sudo apt-get install cri-o cri-o-runc cri-tools -y
sudo systemctl start crio
sudo systemctl enable crio

aptgetupdate


sudo apt-get -y install containernetworking-plugins
#sudo wget -c http://archive.ubuntu.com/ubuntu/pool/universe/g/golang-github-containernetworking-plugins/containernetworking-plugins_0.9.1+ds1-1_amd64.deb
#sudo dpkg -i containernetworking-plugins_0.9.1+ds1-1_amd64.deb

sudo sed -i  's/# network_dir/network_dir/g' /etc/crio/crio.conf
sudo  sed -i '/# plugin_dirs/{a\
plugin_dirs = [\n"/opt/cni/bin/",\n"/usr/lib/cni/",\n]\n
}' /etc/crio/crio.conf
sudo systemctl restart crio

sudo apt-get install -y apt-transport-https ca-certificates curl

sudo curl -fsSLo /etc/apt/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

aptgetupdate


sudo apt-get install -y


sudo apt-get install kubelet  -y
sudo apt-get install kubectl -y
sudo apt-get install kubeadm -y

sudo apt-mark hold kubelet kubeadm kubectl

sudo kubeadm config images pull --cri-socket unix:///var/run/crio/crio.sock --v=5

local_ip=$(ip route get 8.8.8.8 | awk -F"src " 'NR==1{split($2,a," ");print a[1]}')
cat <<EOF | sudo tee /etc/default/kubelet
KUBELET_EXTRA_ARGS=--node-ip=$local_ip
EOF

IPADDR=$local_ip
NODENAME=`hostname | tr -d '-'`
#POD_CIDR="10.244.0.0/16"
POD_CIDR="${POD_CIDR}"

sudo chmod 0600 /home/ubuntu/.ssh/id_ed25519
sudo -u ubuntu scp -i /home/ubuntu/.ssh/id_ed25519  -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null 10.0.1.100:workloadtojoin.sh /home/ubuntu/workloadtojoin.sh
sudo chmod +x /home/ubuntu/workloadtojoin.sh
sudo /home/ubuntu/workloadtojoin.sh
sudo -u ubuntu mkdir /home/ubuntu/.kube
sudo -u ubuntu scp -i /home/ubuntu/.ssh/id_ed25519  -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null  10.0.1.100:/home/ubuntu/.kube/config /home/ubuntu/.kube/config
source_file="ubuntu@10.0.1.100:/etc/cni/net.d/00-multus.conf"
sudo -u ubuntu  scp -i /home/ubuntu/.ssh/id_ed25519  -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null  $source_file /home/ubuntu/00-multus.conf 
if [ $? -ne 0 ]; then
  echo "SCP command failed"
else
  sudo mv /home/ubuntu/00-multus.conf /etc/cni/net.d/
  echo "00-multus.conf placed under /etc/cni/net.d"
   cni_file="/etc/cni/net.d/100-crio-bridge.conf"
     if [ -f "$cni_file" ]; then
        sudo rm $cni_file
        echo "remove $cni_file"
     else
        echo "$cni_file not exist, do nothing"
     fi
fi
#sudo mv /home/ubuntu/00-multus.conf /etc/cni/net.d/00-multus.conf
if ip link show cni0 >/dev/null 2>&1; then
  echo "Deleting interface cni0"
  sudo ip link delete cni0
else
  echo "Interface cni0 not found"
fi

#sudo kubectl --kubeconfig /home/ubuntu/.kube/config rollout restart ds/kube-multus-ds -n kube-system
#
function function_restart_coredns_deployment_after_install_multus () {
sudo kubectl --kubeconfig /home/ubuntu/.kube/config rollout restart deployment/coredns -n kube-system
}

function_restart_coredns_deployment_after_install_multus

touch /home/ubuntu/deploymentcompleted



