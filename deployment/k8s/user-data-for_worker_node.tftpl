#!/bin/bash -xe
function remove_default_bridge_cni_config {
   cni_file="/etc/cni/net.d/100-crio-bridge.conf"
     if [ -f "$cni_file" ]; then
        sudo rm $cni_file
        echo "remove $cni_file"
     else
        echo "$cni_file not exist, do nothing"
     fi

}

function install_calico_cni_multus_auto {
	remove_default_bridge_cni_config 
        curl --insecure --retry 3 --retry-connrefused -fLO https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/tigera-operator.yaml
        kubectl --kubeconfig /home/ubuntu/.kube/config create -f tigera-operator.yaml
        curl --insecure --retry 3 --retry-connrefused -fLO https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/custom-resources.yaml
        sed -i -e "s?192.168.0.0/16?10.244.0.0/16?g" custom-resources.yaml
        sed -i '/calicoNetwork:/a\    containerIPForwarding: Enabled ' custom-resources.yaml
        kubectl --kubeconfig /home/ubuntu/.kube/config create  -f custom-resources.yaml

        watch -g kubectl --kubeconfig /home/ubuntu/.kube/config get namespace calico-system
        sleep 30
        kubectl --kubeconfig /home/ubuntu/.kube/config rollout status deployment calico-typha -n calico-system
        kubectl --kubeconfig /home/ubuntu/.kube/config rollout status ds calico-node -n calico-system
        sudo crictl pull ghcr.io/k8snetworkplumbingwg/multus-cni:v3.9.3
        cd /home/ubuntu
        git clone https://github.com/intel/multus-cni.git
        sudo chown ubuntu:ubuntu /home/ubuntu/multus-cni
        cat /home/ubuntu/multus-cni/deployments/multus-daemonset.yml | kubectl --kubeconfig /home/ubuntu/.kube/config apply -f -
        kubectl --kubeconfig /home/ubuntu/.kube/config rollout status ds/kube-multus-ds -n kube-system
        kubectl --kubeconfig /home/ubuntu/.kube/config rollout restart ds/kube-multus-ds -n kube-system
        kubectl --kubeconfig /home/ubuntu/.kube/config rollout restart deployment coredns -n kube-system
        kubectl --kubeconfig /home/ubuntu/.kube/config rollout status deployment coredns -n kube-system
}

sudo gpg --keyserver keyserver.ubuntu.com --recv-keys B53DC80D13EDEF05

echo "nameserver 8.8.8.8" | sudo tee -a /etc/resolv.conf > /dev/null

function aptgetupdate {
    while true; do
         sudo apt-get update -y
	 sudo apt-get install socat conntrack -y 
	 sudo apt-get install nfs-common -y 
    if [ $? -eq 0 ]; then
      break
    fi
    sleep 5
  done
}

function installcni() {
   CNI_PLUGINS_VERSION="v1.1.1"
   ARCH="amd64"
   DEST="/opt/cni/bin"
   sudo mkdir -p "$DEST"
   curl  --insecure --retry 3 --retry-connrefused -fL "https://github.com/containernetworking/plugins/releases/download/$CNI_PLUGINS_VERSION/cni-plugins-linux-$ARCH-$CNI_PLUGINS_VERSION.tgz" | sudo tar -C "$DEST" -xz 
}

function install_kubeadm_kubele_kubectl {
#RELEASE="$(curl -sSL https://dl.k8s.io/release/stable.txt)"
RELEASE="v1.26.1"
ARCH="amd64"
DOWNLOAD_DIR="/usr/local/bin"
sudo mkdir -p "$DOWNLOAD_DIR"
cd $DOWNLOAD_DIR
sudo curl --insecure --retry 3 --retry-connrefused -fL --remote-name-all https://dl.k8s.io/release/$RELEASE/bin/linux/$ARCH/{kubeadm,kubelet}
sudo chmod +x {kubeadm,kubelet}

RELEASE_VERSION="v0.4.0"
curl --insecure --retry 3 --retry-connrefused -fL "https://raw.githubusercontent.com/kubernetes/release/$RELEASE_VERSION/cmd/kubepkg/templates/latest/deb/kubelet/lib/systemd/system/kubelet.service" | sed "s:/usr/bin:$DOWNLOAD_DIR:g" | sudo tee /etc/systemd/system/kubelet.service
sudo mkdir -p /etc/systemd/system/kubelet.service.d
curl --insecure --retry 3 --retry-connrefused -fL "https://raw.githubusercontent.com/kubernetes/release/$RELEASE_VERSION/cmd/kubepkg/templates/latest/deb/kubeadm/10-kubeadm.conf" | sed "s:/usr/bin:$DOWNLOAD_DIR:g" | sudo tee /etc/systemd/system/kubelet.service.d/10-kubeadm.conf

curl --insecure --retry 3 --retry-connrefused -fLO https://dl.k8s.io/release/v1.26.0/bin/linux/amd64/kubectl
sudo chmod +x /usr/local/bin/kubectl

systemctl enable --now kubelet
}

function install_crio_1_25_0 {
	until contents=$(curl --insecure --retry 3 --retry-connrefused -C - -fLo conmon_2.1.2~0_amd64.deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_22.04/amd64/conmon_2.1.2~0_amd64.deb);do sleep 10;done

	until contents=$(curl --insecure --retry 3 --retry-connrefused -C - -fLo containers-common_1-22_all.deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_22.04/all/containers-common_1-22_all.deb); do sleep 10; done

	until contents=$( curl --insecure  --retry 3 --retry-connrefused -C - -fLo cri-o_1.25.3~0_amd64.deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/1.25/xUbuntu_22.04/amd64/cri-o_1.25.3~0_amd64.deb); do sleep 10; done

	until contents=$(curl --insecure --retry 3 --retry-connrefused -C - -fLo cri-o-runc_1.0.1~2_amd64.deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_22.04/amd64/cri-o-runc_1.0.1~2_amd64.deb); do sleep 10; done

	until contents=$(curl --insecure --retry 3 --retry-connrefused -C - -fLo cri-tools_1.25.0~0_amd64.deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_22.04/amd64/cri-tools_1.25.0~0_amd64.deb); do sleep 10; done


sudo dpkg -i conmon_2.1.2~0_amd64.deb
sudo dpkg -i containers-common_1-22_all.deb
sudo dpkg -i cri-o_1.25.3~0_amd64.deb
sudo dpkg -i cri-o-runc_1.0.1~2_amd64.deb
sudo dpkg -i cri-tools_1.25.0~0_amd64.deb

}

export DEBIAN_FRONTEND=noninteractive
exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

aptgetupdate
#sudo apt-get install linux-modules-extra-`uname -r` -y 
#sudo modprobe vrf

#disable swap
sudo swapoff -a
sudo sed -e '/swap/ s/^#*/#/' -i /etc/fstab

#install dep module for cri-o runtime
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter



# sysctl params required by setup, params persist across reboots
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

sudo sysctl --system

##instal cri-o
export OS=xUbuntu_22.04
export CRIO_VERSION=1.25
echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/ /"| sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/$CRIO_VERSION/$OS/ /"|sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable:cri-o:$CRIO_VERSION.list
#provo-mirror


curl --insecure --retry 3 --retry-connrefused -fsSL https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:$CRIO_VERSION/$OS/Release.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/devel_kubic_libcontainers_stable_cri-o_$CRIO_VERSION.gpg > /dev/null
curl --insecure --retry 3 --retry-connrefused -fsSL https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/Release.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/devel_kubic_libcontainers_stable.gpg > /dev/nulll

aptgetupdate

#sudo apt-get install conmon -y
#sudo apt-get install cri-o cri-o-runc cri-tools -y

install_crio_1_25_0

sudo systemctl start crio
sudo systemctl enable crio

aptgetupdate

installcni 
remove_default_bridge_cni_config

sudo sed -i  's/# network_dir/network_dir/g' /etc/crio/crio.conf
sudo  sed -i '/# plugin_dirs/{a\
plugin_dirs = [\n"/opt/cni/bin/",\n"/usr/lib/cni/",\n]\n
}' /etc/crio/crio.conf
sudo systemctl restart crio

install_kubeadm_kubele_kubectl


sudo kubeadm config images pull --cri-socket unix:///var/run/crio/crio.sock --kubernetes-version=v1.26.1 --v=5

local_ip=$(ip route get 8.8.8.8 | awk -F"src " 'NR==1{split($2,a," ");print a[1]}')
cat <<EOF | sudo tee /etc/default/kubelet
KUBELET_EXTRA_ARGS=--node-ip=$local_ip
EOF

IPADDR=$local_ip
NODENAME=`hostname | tr -d '-'`
#POD_CIDR="10.244.0.0/16"
POD_CIDR="${POD_CIDR}"

echo $IPADDR $NODENAME  | sudo tee -a  /etc/hosts 

sudo chmod 0600 /home/ubuntu/.ssh/id_ed25519
sudo -u ubuntu scp -i /home/ubuntu/.ssh/id_ed25519  -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null 10.0.1.100:workloadtojoin.sh /home/ubuntu/workloadtojoin.sh
sudo chmod +x /home/ubuntu/workloadtojoin.sh
sudo /home/ubuntu/workloadtojoin.sh
sudo -u ubuntu mkdir /home/ubuntu/.kube
sudo -u ubuntu scp -i /home/ubuntu/.ssh/id_ed25519  -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null  10.0.1.100:/home/ubuntu/.kube/config /home/ubuntu/.kube/config

source_file="ubuntu@10.0.1.100:/etc/cni/net.d/00-multus.conf"
if [ -f $source_file ]
then
  sudo -u ubuntu  scp -i /home/ubuntu/.ssh/id_ed25519  -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null  $source_file /home/ubuntu/00-multus.conf
  sudo mv /home/ubuntu/00-multus.conf /etc/cni/net.d/
  echo "00-multus.conf placed under /etc/cni/net.d"
   cni_file="/etc/cni/net.d/100-crio-bridge.conf"
     if [ -f "$cni_file" ]; then
        sudo rm $cni_file
        echo "remove $cni_file"
     else
        echo "$cni_file not exist, do nothing"
     fi
fi 
         #
         #if [ $? -ne 0 ]; then
         #  echo "SCP command failed"
         #else
         #  sudo mv /home/ubuntu/00-multus.conf /etc/cni/net.d/
         #  echo "00-multus.conf placed under /etc/cni/net.d"
         #   cni_file="/etc/cni/net.d/100-crio-bridge.conf"
         #     if [ -f "$cni_file" ]; then
         #        sudo rm $cni_file
         #        echo "remove $cni_file"
         #     else
         #        echo "$cni_file not exist, do nothing"
         #     fi
         #fi
         ##sudo mv /home/ubuntu/00-multus.conf /etc/cni/net.d/00-multus.conf
if ip link show cni0 >/dev/null 2>&1; then
  echo "Deleting interface cni0"
  sudo ip link delete cni0
else
  echo "Interface cni0 not found"
fi

#install_calico_cni_multus_auto 
#sudo kubectl --kubeconfig /home/ubuntu/.kube/config rollout restart ds/kube-multus-ds -n kube-system
#
function function_restart_coredns_deployment_after_install_multus () {
	while true; do
           sudo kubectl --kubeconfig /home/ubuntu/.kube/config rollout restart deployment/coredns -n kube-system
             if [ $? -eq 0 ]; then
               break
             fi
             sleep 30 
        done
   }

#function_restart_coredns_deployment_after_install_multus


touch /home/ubuntu/deploymentcompleted



