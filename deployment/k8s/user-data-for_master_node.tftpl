#!/bin/bash -xe
export DEBIAN_FRONTEND=noninteractive
exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

function install_crio_1_25_0 {
    curl --insecure --retry 3 --retry-connrefused -C - -fLo conmon_2.1.2~0_amd64.deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_22.04/amd64/conmon_2.1.2~0_amd64.deb
    curl --insecure --retry 3 --retry-connrefused -C - -fLo containers-common_1-22_all.deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_22.04/all/containers-common_1-22_all.deb
    #curl --insecure  --retry 3 --retry-connrefused -C - -fLo cri-o_1.25.2~0_amd64.deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/1.25/xUbuntu_22.04/amd64/cri-o_1.25.2~0_amd64.deb
    wget --no-check-certificate -c https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/1.25/xUbuntu_22.04/amd64/cri-o_1.25.3~0_amd64.deb
    curl --insecure --retry 3 --retry-connrefused -C - -fLo cri-o-runc_1.0.1~2_amd64.deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_22.04/amd64/cri-o-runc_1.0.1~2_amd64.deb
    curl --insecure --retry 3 --retry-connrefused -C - -fLo cri-tools_1.25.0~0_amd64.deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_22.04/amd64/cri-tools_1.25.0~0_amd64.deb

    sudo dpkg -i conmon_2.1.2~0_amd64.deb
    sudo dpkg -i containers-common_1-22_all.deb
    sudo dpkg -i cri-o_1.25.3~0_amd64.deb
    sudo dpkg -i cri-o-runc_1.0.1~2_amd64.deb
    sudo dpkg -i cri-tools_1.25.0~0_amd64.deb

    sudo systemctl start crio
    sudo systemctl enable crio

}

function installcni() {
    CNI_PLUGINS_VERSION="v1.1.1"
    ARCH="amd64"
    DEST="/opt/cni/bin"
    sudo mkdir -p "$DEST"
    curl  --insecure --retry 3 --retry-connrefused -fL "https://github.com/containernetworking/plugins/releases/download/$CNI_PLUGINS_VERSION/cni-plugins-linux-$ARCH-$CNI_PLUGINS_VERSION.tgz" | sudo tar -C "$DEST" -xz
}

function installcrictl {
    DOWNLOAD_DIR="/usr/local/bin"
    sudo mkdir -p "$DOWNLOAD_DIR"
    CRICTL_VERSION="v1.25.0"
    ARCH="amd64"
    curl  --insecure --retry 3 --retry-connrefused -fL "https://github.com/kubernetes-sigs/cri-tools/releases/download/$CRICTL_VERSION/crictl-$CRICTL_VERSION-linux-$ARCH.tar.gz" | sudo tar -C $DOWNLOAD_DIR -xz
}

function install_calico_cni_multus_auto {
	sudo curl --insecure --retry 3 --retry-connrefused -fL https://github.com/projectcalico/calico/releases/latest/download/calicoctl-linux-amd64 -o /usr/local/bin/calicoctl
	sudo chmod +x /usr/local/bin/calicoctl

	curl --insecure --retry 3 --retry-connrefused -fLO https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/tigera-operator.yaml
	kubectl --kubeconfig /home/ubuntu/.kube/config create -f tigera-operator.yaml 
	curl --insecure --retry 3 --retry-connrefused -fLO https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/custom-resources.yaml
	sed -i -e "s?blockSize: 26?blockSize: 24?g" custom-resources.yaml
	sed -i -e "s?VXLANCrossSubnet?VXLAN?g" custom-resources.yaml
	sed -i -e "s?192.168.0.0/16?10.244.0.0/16?g" custom-resources.yaml
	sed -i '/calicoNetwork:/a\    containerIPForwarding: Enabled ' custom-resources.yaml 
	sed -i '/calicoNetwork:/a\    bgp: Disabled ' custom-resources.yaml
	kubectl --kubeconfig /home/ubuntu/.kube/config create namespace calico-system
	kubectl --kubeconfig /home/ubuntu/.kube/config apply  -f custom-resources.yaml
	
	#watch -g kubectl --kubeconfig /home/ubuntu/.kube/config get namespace calico-system 
	sleep 30
	#kubectl --kubeconfig /home/ubuntu/.kube/config rollout status deployment calico-typha -n calico-system 
	#kubectl --kubeconfig /home/ubuntu/.kube/config rollout status ds calico-node -n calico-system
	sudo crictl pull ghcr.io/k8snetworkplumbingwg/multus-cni:v3.9.3
        cd /home/ubuntu
        git clone https://github.com/intel/multus-cni.git
        sudo chown ubuntu:ubuntu /home/ubuntu/multus-cni
	sudo sed -i 's/multus-conf-file=auto/multus-conf-file=\/tmp\/multus-conf\/70-multus.conf/g' /home/ubuntu/multus-cni/deployments/multus-daemonset.yml
	cat /home/ubuntu/multus-cni/deployments/multus-daemonset.yml | kubectl --kubeconfig /home/ubuntu/.kube/config apply -f -
	#kubectl --kubeconfig /home/ubuntu/.kube/config rollout status ds/kube-multus-ds -n kube-system
	#rename_70_multus_to_00_multus_conf
	#kubectl --kubeconfig /home/ubuntu/.kube/config rollout restart ds/kube-multus-ds -n kube-system
	#kubectl --kubeconfig /home/ubuntu/.kube/config rollout restart deployment coredns -n kube-system
	#kubectl --kubeconfig /home/ubuntu/.kube/config rollout status deployment coredns -n kube-system
}

function remove_default_bridge_cni_config {

        cni_file="/etc/cni/net.d/100-crio-bridge.conf"
        if [ -f "$cni_file" ]; then
            sudo rm $cni_file
            echo "remove $cni_file"
        else
            echo "$cni_file not exist, do nothing"
        fi
}

function install_flannel_if_worker_node_exist_otherwise_untaint_master_node {
        WORKER_COUNT="${WORKER_COUNT}"
        if [[ $WORKER_COUNT  -eq 0 ]]
        then
            kubectl --kubeconfig /home/ubuntu/.kube/config taint nodes --all node-role.kubernetes.io/control-plane-
        else
         kubectl --kubeconfig /home/ubuntu/.kube/config apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml

        cni_file="/etc/cni/net.d/100-crio-bridge.conf"
        if [ -f "$cni_file" ]; then
            sudo rm $cni_file
            echo "remove $cni_file"
        else
            echo "$cni_file not exist, do nothing"
        fi
        fi
}



function install_kubeadm_kubele_kubectl {
        #RELEASE="$(curl -sSL https://dl.k8s.io/release/stable.txt)"
        RELEASE="v1.26.1"
        ARCH="amd64"
        DOWNLOAD_DIR="/usr/local/bin"
        sudo mkdir -p "$DOWNLOAD_DIR"
        cd $DOWNLOAD_DIR
        sudo curl --insecure --retry 3 --retry-connrefused -fL --remote-name-all https://dl.k8s.io/release/$RELEASE/bin/linux/$ARCH/{kubeadm,kubelet}
        sudo chmod +x {kubeadm,kubelet}

        RELEASE_VERSION="v0.4.0"
        curl --insecure --retry 3 --retry-connrefused -fL "https://raw.githubusercontent.com/kubernetes/release/$RELEASE_VERSION/cmd/kubepkg/templates/latest/deb/kubelet/lib/systemd/system/kubelet.service" | sed "s:/usr/bin:$DOWNLOAD_DIR:g" | sudo tee /etc/systemd/system/kubelet.service
        sudo mkdir -p /etc/systemd/system/kubelet.service.d
        curl --insecure --retry 3 --retry-connrefused -fL "https://raw.githubusercontent.com/kubernetes/release/$RELEASE_VERSION/cmd/kubepkg/templates/latest/deb/kubeadm/10-kubeadm.conf" | sed "s:/usr/bin:$DOWNLOAD_DIR:g" | sudo tee /etc/systemd/system/kubelet.service.d/10-kubeadm.conf

        curl --insecure --retry 3 --retry-connrefused -fLO https://dl.k8s.io/release/v1.26.0/bin/linux/amd64/kubectl
        sudo chmod +x /usr/local/bin/kubectl

        systemctl enable --now kubelet
}


function install_kubernetes {
        sudo kubeadm config images pull --cri-socket unix:///var/run/crio/crio.sock --kubernetes-version=v1.26.1 --v=5

local_ip=$(ip route get 8.8.8.8 | awk -F"src " 'NR==1{split($2,a," ");print a[1]}')
CLUSTERDNSIP="${CLUSTERDNSIP}"
cat <<EOF | sudo tee /etc/default/kubelet
KUBELET_EXTRA_ARGS=--node-ip=$local_ip,--cluster-dns=$CLUSTERDNSIP
EOF

        IPADDR=$local_ip
        NODENAME=`hostname | tr -d '-'`
        POD_CIDR="${POD_CIDR}"
        SERVICE_CIDR="${SERVICE_CIDR}"

        echo $IPADDR $NODENAME  | sudo tee -a  /etc/hosts

        sudo kubeadm init --cri-socket=unix:///var/run/crio/crio.sock --apiserver-advertise-address=$IPADDR  --apiserver-cert-extra-sans=$IPADDR  --service-cidr=$SERVICE_CIDR --pod-network-cidr=$POD_CIDR --node-name $NODENAME  --token-ttl=0 -v=5
        
        sleep 10
        mkdir -p /home/ubuntu/.kube
        sudo cp -i /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
        sudo chown ubuntu:ubuntu /home/ubuntu/.kube/config
        sudo mkdir -p /root/.kube
        sudo cp /home/ubuntu/.kube/config /root/.kube/config

        kubectl --kubeconfig /home/ubuntu/.kube/config config set-cluster kubernetes --server "https://$local_ip:6443"

}




function create_crio_config {
        sudo sed -i  's/# network_dir/network_dir/g' /etc/crio/crio.conf
        sudo  sed -i '/# plugin_dirs/{a\
        plugin_dirs = [\n"/opt/cni/bin/",\n"/usr/lib/cni/",\n]\n
        }' /etc/crio/crio.conf
        sudo systemctl restart crio

}

function set_swapoff_kernelmodule_sysctl {
        sudo swapoff -a
        sudo sed -e '/swap/ s/^#*/#/' -i /etc/fstab

        #install dep module for cri-o runtime
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
        overlay
        br_netfilter
EOF

        sudo modprobe overlay
        sudo modprobe br_netfilter

# sysctl params required by setup, params persist across reboots
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
        net.bridge.bridge-nf-call-iptables  = 1
        net.bridge.bridge-nf-call-ip6tables = 1
        net.ipv4.ip_forward                 = 1
EOF
        sudo sysctl --system

}

function aptgetupdate_install_tools {
    while true; do
         sudo apt-get update -y
         sudo apt-get install socat conntrack -y
         sudo apt-get install jq -y
         sudo apt-get install apt-transport-https ca-certificates -y
	 sudo apt-get install nfs-server -y 
    if [[ $? -eq 0 ]]; then
      break
    fi
    sleep 5
  done
}

function install_gatekeeperv3 {
    kubectl --kubeconfig /home/ubuntu/.kube/config apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper/master/deploy/gatekeeper.yaml
}

function git_clone_cfos_script {
        mkdir -p /home/ubuntu/
        cd /home/ubuntu/
        git clone https://github.com/yagosys/202301.git
}



function copy_kubernetes-archive-keyring {
        sudo cp /home/ubuntu/202301/deployment/k8s/kubernetes-archive-keyring.gpg /etc/apt/keyrings/kubernetes-archive-keyring.gpg
        echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources
        .list.d/kubernetes.list
        #sudo apt-get install linux-modules-extra-`uname -r` -y
        #sudo modprobe vrf
}






function install_whereabouts_plugin {
        #install whereabout ipam plugin
        cd /home/ubuntu
        git clone https://github.com/k8snetworkplumbingwg/whereabouts && cd whereabouts

        kubectl --kubeconfig /home/ubuntu/.kube/config apply \
            -f doc/crds/daemonset-install.yaml \
            -f doc/crds/whereabouts.cni.cncf.io_ippools.yaml \
            -f doc/crds/whereabouts.cni.cncf.io_overlappingrangeipreservations.yaml
}





function git_clone_cfos_script {
        mkdir -p /home/ubuntu/
        cd /home/ubuntu/
        git clone https://github.com/yagosys/202301.git
}

function install_multus_cni_if_worker_node_exist {
 #install multus CNI
 sudo crictl pull ghcr.io/k8snetworkplumbingwg/multus-cni:v3.9.3
 cd /home/ubuntu
 git clone https://github.com/intel/multus-cni.git
 sudo chown ubuntu:ubuntu /home/ubuntu/multus-cni

    if [[ $WORKER_COUNT  -eq 0 ]]
    then
            echo 'use multus default where multus configuration will be auto generatd'
    else
            echo 'comment out multus configuration will be set to use 70-multus.config'
    fi

 cat /home/ubuntu/multus-cni/deployments/multus-daemonset.yml | kubectl --kubeconfig /home/ubuntu/.kube/config apply -f -

 kubectl --kubeconfig /home/ubuntu/.kube/config rollout status ds/kube-multus-ds -n kube-system


    if [[ $WORKER_COUNT  -eq 0 ]]
    then
            echo ''
    else
        if ip link show cni0 >/dev/null 2>&1; then
            echo "Deleting interface cni0"
            sudo ip link delete cni0
        else
            echo "Interface cni0 not found"
        fi
    fi
}

function untaintmasternode {
	if [[ $WORKER_COUNT -eq 0 ]] 
	then 
	kubectl --kubeconfig /home/ubuntu/.kube/config taint nodes --all node-role.kubernetes.io/control-plane-
	fi 
}

function install_docker_secret_and_cfos_license {
    cat /home/ubuntu/.dockerinterbeing.yaml | kubectl --kubeconfig /home/ubuntu/.kube/config apply -f -
    kubectl --kubeconfig /home/ubuntu/.kube/config get pod -A
    cd /home/ubuntu
    mkdir /home/ubuntu/data -p
    cat /home/ubuntu/fos_license.yaml | kubectl --kubeconfig /home/ubuntu/.kube/config apply -f -
}




function function_restart_coredns_deployment_after_install_multus () {
        if [[ $WORKER_COUNT  -eq 0 ]]
        then
          kubectl --kubeconfig /home/ubuntu/.kube/config get pod -A -o wide
        else
        #sleep 10
            kubectl --kubeconfig /home/ubuntu/.kube/config rollout restart deployment/coredns -n kube-system
            kubectl --kubeconfig /home/ubuntu/.kube/config rollout status  deployment/coredns -n kube-system
            kubectl --kubeconfig /home/ubuntu/.kube/config get pod -A -o wide
        fi
}


function updatehostdns {

AWSDNSIP="${AWSDNSIP}"

sudo mkdir /etc/systemd/resolved.conf.d/ -p
touch /etc/systemd/resolved.conf.d/dns_servers.conf

cat << EOF | sudo tee -a /etc/systemd/resolved.conf.d/dns_servers.conf > /dev/null
[Resolve]
DNS=$CLUSTERDNSIP 8.8.8.8
EOF

cat << EOF | sudo tee -a /etc/systemd/resolved.conf
[Resolve]
DNS=$CLUSTERDNSIP
FallbackDNS=$AWSDNSIP
Domains=cluster.local
EOF

sudo systemctl restart systemd-resolved

}

function rename_70_multus_to_00_multus_conf {
multus_cni_file="/etc/cni/net.d/70-multus.conf"

if [ -f "$multus_cni_file" ]; then
    sudo mv "$multus_cni_file" "/etc/cni/net.d/00-multus.conf"
    echo "File renamed to 00-multus.conf to make multus as first cni"
else
    echo "File 70-multus.conf not found"
fi
}

function create_token_for_worker_to_join {
grep --text discovery-token-ca-cert /var/log/user-data.log -B 1 | head -n 2 | tr -d '\n' | tr -d '\\' > /home/ubuntu/workloadtojoin.sh
kubeadm config print join-defaults  > /home/ubuntu/kubeadm-join.default.yaml
echo '#kubeadm join --config kubeadm-join.default.yaml' | sudo tee -a  /home/ubuntu/workloadtojoin.sh
chmod +x /home/ubuntu/workloadtojoin.sh

}

function enable_nfs_server_master {
sudo -u ubuntu  mkdir /home/ubuntu/data -p
sudo chmod 666 /home/ubuntu/data
cat << EOF | sudo   tee  /etc/exports
/home/ubuntu/data 10.0.1.100(rw,no_subtree_check,no_root_squash)
/home/ubuntu/data 10.0.2.200(rw,no_subtree_check,no_root_squash)
/home/ubuntu/data 10.0.2.201(rw,no_subtree_check,no_root_squash)
/home/ubuntu/data 10.0.2.202(rw,no_subtree_check,no_root_squash)
EOF
sudo systemctl enable --now nfs-server
sudo exportfs -ar
}

echo "nameserver $CLUSTERDNSIP" | sudo tee -a /etc/resolv.conf > /dev/null
echo "nameserver 8.8.8.8" | sudo tee -a /etc/resolv.conf > /dev/null

set_swapoff_kernelmodule_sysctl

install_crio_1_25_0

installcni

create_crio_config

aptgetupdate_install_tools

installcrictl

install_kubeadm_kubele_kubectl

install_kubernetes

remove_default_bridge_cni_config 

#install_whereabouts_plugin


CNINAME="${CNI}"
case $CNINAME in
      "flannel")
     	 install_flannel_if_worker_node_exist_otherwise_untaint_master_node
      	 ;;
      "calico")
#	   if [ $WORKER_COUNT  -eq 0 ]
#	      then 
              remove_default_bridge_cni_config
	      install_calico_cni_multus_auto
#	  fi
         ;;
      *)
     	   echo 'no CNI specified, default bridge CNI will be configured'
         ;;
esac


MULTUSCNI="${MULTUSCNI}"
if [ "$MULTUSCNI" = "true" ]
then
   install_multus_cni_if_worker_node_exist
fi 

untaintmasternode 

install_docker_secret_and_cfos_license

create_token_for_worker_to_join 

function_restart_coredns_deployment_after_install_multus

GATEKEEPER="${GATEKEEPER}"
if [ "$GATEKEEPER" = "true" ]
then
   install_gatekeeperv3
fi 

git_clone_cfos_script

enable_nfs_server_master

updatehostdns


touch /home/ubuntu/deploymentcompleted
